class ma_monitor extends uvm_monitor;
`uvm_component_utils(ma_monitor) 

  virtual intf.MASTER_MONITOR_MP vif; 
  ma_agent_config m_cfg;
 
  uvm_analysis_port #(master_xtn) monitor_port;

  extern function new(string name = "ma_monitor", uvm_component parent); 
  extern function void build_phase(uvm_phase phase);
  extern function void connect_phase(uvm_phase phase); 
  extern task run_phase(uvm_phase phase);
  extern task collect_data(master_xtn data_sent); 
endclass

function ma_monitor::new(string name ="ma_monitor",uvm_component parent);
  super.new(name, parent);
  monitor_port = new("monitor_port", this); 
endfunction

function void ma_monitor::build_phase(uvm_phase phase); 
  super.build_phase(phase);
  if(!uvm_config_db #(ma_agent_config)::get(this,"","ma_agent_config",m_cfg))
  `uvm_fatal("CONFIG","cannot get() m_cfg from uvm_config_db. set() it")
endfunction

function void ma_monitor::connect_phase(uvm_phase phase); 
  vif = m_cfg.vif;
endfunction

task ma_monitor::run_phase(uvm_phase phase); 
  master_xtn data_sent; 
  data_sent=master_xtn::type_id::create("data_sent");
  forever begin 
    collect_data(data_sent);
  end
endtask

task ma_monitor::collect_data(master_xtn data_sent);

  @(vif.mst_mon_cb); 
  wait(vif.mst_mon_cb.b);

  data_sent.a = vif.mst_mon_cb.a;
  `uvm_info("a",$sformatf("printing from master monitor is a=%d",data_sent.sprint()),UVM_LOW)

  data_sent.b = vif.mst_mon_cb.b;
  `uvm_info("b",$sformatf("printing from master monitor is b=%s",data_sent.sprint()),UVM_LOW)

  monitor_port.write(data_sent); 

endtask


