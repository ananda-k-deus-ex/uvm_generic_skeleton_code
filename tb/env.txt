class env extends uvm_env;
`uvm_component_utils(env)

  ma_agt_top magt_top; 
  sl_agt_top sagt_top; 
  virtual_sequencer v_seqr; 
  scoreboard sb; 
  env_config m_cfg;

  extern function new(string name = "env",uvm_component parent); 
  extern function void build_phase(uvm_phase phase);
  extern function void connect_phase(uvm_phase phase); 
endclass

function env::new(string name="env",uvm_component parent); 
  super.new(name,parent);
endfunction

function void env::build_phase(uvm_phase phase);
  if(!uvm_config_db #(env_config)::get(this,"","env_config",m_cfg))
  `uvm_fatal("ENV_CONFIG","FAILED") 

  if(m_cfg.has_magent) begin
    uvm_config_db#(ma_agent_config)::set(this,"magt_top*","ma_agent_config",m_cfg.m_ma_agent_cfg);
    magt_top = ma_agt_top::type_id::create("wagt_top",this);
  end
  if(m_cfg.has_sagent) begin
    uvm_config_db#(sl_agent_config)::set(this,"sagt_top*","sl_agent_config",m_cfg.m_sl_agent_cfg);
    sagt_top = sl_agt_top::type_id::create("sagt_top",this); 
  end

  super.build_phase(phase); 

  if(m_cfg.has_virtual_sequencer) begin
    v_seqr = virtual_sequencer::type_id::create("v_seqr",this); 
  end
  if(m_cfg.has_scoreboard) begin
    sb= scoreboard::type_id::create("sb",this); 
  end
endfunction

function void env::connect_phase(uvm_phase phase); 
  if(m_cfg.has_virtual_sequencer) begin
    if(m_cfg.has_magent) begin
      v_seqr.ma_seqrh=magt_top.magenth.seq; 
    end 
  if(m_cfg.has_sagent) begin
    v_seqr.sl_seqrh=sagt_top.sagenth.seq; 
    end
  end
  if(m_cfg.has_scoreboard) begin
    magt_top.magenth.monh.monitor_port.connect(sb.fifo_mah.analysis_export);
    sagt_top.sagenth.monh.monitor_port.connect(sb.fifo_slh.analysis_export); 
  end
endfunction

