class sl_agent extends uvm_agent;
`uvm_component_utils(sl_agent) 

  sl_agent_config m_cfg;
  sl_monitor monh; 
  sl_driver drvh; 
  sl_sequencer seq;

  extern function new(string name = "sl_agent", uvm_component parent = null);
  extern function void build_phase(uvm_phase phase); 
  extern function void connect_phase(uvm_phase phase);
endclass


function sl_agent::new(string name = "sl_agent",uvm_component parent = null);
  super.new(name, parent); 
endfunction

function void sl_agent::build_phase(uvm_phase phase); 
  super.build_phase(phase);

  if(!uvm_config_db #(sl_agent_config)::get(this,"","sl_agent_config",m_cfg))
  `uvm_fatal("CONFIG","cannot get() m_cfg from uvm_config_db. set() it")

  monh =sl_monitor::type_id::create("monh",this); 

  if(m_cfg.is_active==UVM_ACTIVE) begin
    drvh=sl_driver::type_id::create("drvh",this); 
    seq=sl_sequencer::type_id::create("seq",this);
  end 
endfunction

function void sl_agent::connect_phase(uvm_phase phase); 
  if(m_cfg.is_active==UVM_ACTIVE) begin
    drvh.seq_item_port.connect(seq.seq_item_export); 
  end
endfunction
